import Foundation

@testable import Test
// this file was generated by Xcode-Better-Refactor-Tools
// https://github.com/tjarratt/xcode-better-refactor-tools

class FakeMainThreadExecuter : MainThreadExecuter, Equatable {
    init() {
    }

    private(set) var executeCallCount : Int = 0
    var executeStub : ((() -> ()) -> ())?
    private var executeArgs : Array<(() -> ())> = []
    func executeReturns(stubbedValues: ()) {
        self.executeStub = {(function: () -> ()) -> () in
            return stubbedValues
        }
    }
    func executeArgsForCall(callIndex: Int) -> (() -> ()) {
        return self.executeArgs[callIndex]
    }
    func execute(function: () -> ()) -> () {
        self.executeCallCount += 1
        self.executeArgs.append((function))
//        return self.executeStub!(function)
    }

    private(set) var startSpinnerCallCount : Int = 0
    private var startSpinnerArgs : Array<(UIViewController)> = []
    func startSpinnerArgsForCall(callIndex: Int) -> (UIViewController) {
        return self.startSpinnerArgs[callIndex]
    }
    func startSpinner(viewController: UIViewController) {
        self.startSpinnerCallCount += 1
        self.startSpinnerArgs.append((viewController))
    }

    private(set) var stopSpinnerCallCount : Int = 0
    private var stopSpinnerArgs : Array<(UIViewController)> = []
    func stopSpinnerArgsForCall(callIndex: Int) -> (UIViewController) {
        return self.stopSpinnerArgs[callIndex]
    }
    func stopSpinner(viewController: UIViewController) {
        self.stopSpinnerCallCount += 1
        self.stopSpinnerArgs.append((viewController))
    }

    static func reset() {
    }
}

func == (a: FakeMainThreadExecuter, b: FakeMainThreadExecuter) -> Bool {
    return a === b
}